"def Evaluate (pdPente, pdExpo, pdAzi):\\n\\n    # ************** fonction *********************\\n    def perpendiculaire(angle):\\n        Intervales=[]\\n        # on cherche la perpendiculaire à la pente :\\n        perpent=angle+90\\n\\n        # on vérifie que la perpendiculaire n'est pas supérieur à 360\\n        # qi oui on ajoute 360°\\n        if perpent>180 :\\n            perpent=perpent-180\\n\\n        # Les bornes sont définis avec +/- 30°\\n        B1, B2 = perpent-" + Angle + ", perpent+"+Angle+"\\n\\n        # Cas normale\\n        Intervales=[B1,B2,0,0]\\n\\n        #Cas 1 : si la borne inférieure est négative.\\n        if B1<0:\\n            Intervales=[0,B2,B1+180,180]\\n\\n        #Cas2\\n        if B2>180:\\n                Intervales=[0,B2-180,B1,180]\\n        return Intervales\\n\\n    # cette fonction evaluera si une haie se positionne avec un angle +/- 30° à la perpendiculaire de la pente.\\n    # on déclare les fonctions qui seront utilisées.\\n    # 1 ) il faut évaluer si la haie est sur une pente de plus de 7 ° si non on n'est pas sur une pente\\n    #     de plus de 7°\\n    # 2) on évalue la l'angle de la haie sur 180°\\n\\n    # on ramène l'angle à 180°\\n    if pdAzi>180 : pdAzi-=180\\n\\n    if pdPente==0 : AntiErosif = \"non\"\\n    if pdExpo==-1 : AntiErosif = \"non\"\\n    if pdPente==1 :\\n\\n        # b1, b2 , b3, b4 récupère respectivement les enregistrement de la liste.\\n        Intervales = perpendiculaire(pdExpo)\\n        b1, b2, b3, b4 = Intervales\\n        # on teste si l'azimut de la haie se trouve dans l'intervales de la perpendiculaire à +/-30\\n        if b1<pdAzi<b2 or b3<pdAzi<b4 :\\n            AntiErosif = \"oui\"\\n        else : AntiErosif = \"non\"\\n\\n    return AntiErosif\\n"